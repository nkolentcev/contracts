// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: mobexchange/mobexchange.proto

package mobexchangev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MobileExchange_Register_FullMethodName = "/mobexchange.MobileExchange/Register"
	MobileExchange_Login_FullMethodName    = "/mobexchange.MobileExchange/Login"
)

// MobileExchangeClient is the client API for MobileExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobileExchangeClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type mobileExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewMobileExchangeClient(cc grpc.ClientConnInterface) MobileExchangeClient {
	return &mobileExchangeClient{cc}
}

func (c *mobileExchangeClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MobileExchange_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileExchangeClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MobileExchange_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobileExchangeServer is the server API for MobileExchange service.
// All implementations must embed UnimplementedMobileExchangeServer
// for forward compatibility
type MobileExchangeServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedMobileExchangeServer()
}

// UnimplementedMobileExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedMobileExchangeServer struct {
}

func (UnimplementedMobileExchangeServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMobileExchangeServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMobileExchangeServer) mustEmbedUnimplementedMobileExchangeServer() {}

// UnsafeMobileExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobileExchangeServer will
// result in compilation errors.
type UnsafeMobileExchangeServer interface {
	mustEmbedUnimplementedMobileExchangeServer()
}

func RegisterMobileExchangeServer(s grpc.ServiceRegistrar, srv MobileExchangeServer) {
	s.RegisterService(&MobileExchange_ServiceDesc, srv)
}

func _MobileExchange_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileExchangeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileExchange_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileExchangeServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileExchange_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileExchangeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileExchange_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileExchangeServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MobileExchange_ServiceDesc is the grpc.ServiceDesc for MobileExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MobileExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobexchange.MobileExchange",
	HandlerType: (*MobileExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MobileExchange_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MobileExchange_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mobexchange/mobexchange.proto",
}
